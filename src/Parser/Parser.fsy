%{
open ParserModule
open type LHMachine.Expr

// EFunc of arg:Name * body:Expr
// ["x","y","z"], body ->
//   --> EFunc ("x", EFunc ("y", EFunc ("z", body)))
let rec unfoldFunction args body =
    match args with
    | [] ->
        body
    | h :: t ->
        EFunc (h, unfoldFunction t body)
%}

%start start

%token <int> INT
%token <string> UIDENT
%token <string> LIDENT
%token <string> IDENT
%token <string> STRING
%token DSCOLON
%token MODULE TYPEDEF OF IF THEN ELSE HANDLER LET RECURSIVE IN
%token EQ GT PLUS MINUS SEMICOLON VBAR STAR COLON COMMA EOF
%token LEFT_BRACE RIGHT_BRACE LEFT_BRACKET RIGHT_BRACKET RARROW
%token MATCH WITH UNDERSCORE

%type <ParserModule.Module option> start

%nonassoc LET

%%

start:
  | EOF { None }
  | modle { Some $1 }

// =================================================
// Single typed variable declaration.
// "x : int", "ud : UserData"
// =================================================
typedVarDecl:
  | LIDENT COLON LIDENT    { ($1, $3) }
  | LIDENT COLON UIDENT    { ($1, $3) }

// =================================================
// Multiple typed variable declarations, separated by a semicolon
// "x : int; ud: UserData"
// =================================================
typedVarDecls:
  | { [] }
  | typedVarDecl { [$1] }
  | typedVarDecl SEMICOLON typedVarDecls  { $1 :: $3 }

// =================================================
// Single variable declaration, may not contain type.
// "y", "x : int", "ud : UserData"
// =================================================
varDecl:
  | LIDENT                 { ($1, "") }
  | LIDENT COLON UIDENT    { ($1, $3) }

// ====================================================
// Multiple variable declarations, separated by a comma
// "x : int, y, z"
// ====================================================
varDecls:
  | { [] }
  | varDecl { [$1] }
  | varDecl COMMA varDecls  { $1 :: $3 }

// =================================================
// Single variable declaration, may not contain type.
// "y", "x : int", "ud : UserData"
// =================================================
patternVarDecl:
  | LIDENT                 { ($1, "") }
  | LIDENT COLON UIDENT    { ($1, $3) }
  | UNDERSCORE             { ("_", "") }

patternVarDecls :
  | { [] }
  | patternVarDecl { [$1] }
  | patternVarDecl COMMA patternVarDecls  { $1 :: $3 }

// =================================================
// A single constructor argument.
// "x : int", "string"
// =================================================
ctorArg:
  | LIDENT COLON UIDENT   { ($1, $3) } // variable : typename
  | LIDENT                { ("", $1) } // lowercase typename
  | UIDENT                { ("", $1) } // uppercase typename

// =================================================
// A series of constructor arguments.
// "x : int * y: string * UserData"
// =================================================
ctorArgs:
  | ctorArg { List.singleton $1 }
  | ctorArg STAR ctorArgs  { $1 :: $3 }

// =================================================
// A single SumType constructor
// "| Circle of int"
// "| Point of x:int * y:int * z:int"
// =================================================
sumtypeCtor:
  | VBAR UIDENT { ($2, []) }
  | VBAR UIDENT OF ctorArgs { ($2, $4) }

// =================================================
// A series of constructors.
// "| Circle | Point of int * int * int"
// =================================================
sumtypeCtors:
  | sumtypeCtor  { List.singleton $1 }
  | sumtypeCtor sumtypeCtors { $1 :: $2 }

// =================================================
// A sumtype is a series of constructors.
// =================================================
sumType:
  | sumtypeCtors  { SumType $1 }

// =================================================
// A product type is defined as a possibly empty list
//  of variable declarations enclosed in braces.
// "{ a:int, b:string }"
// "{ }"    (empty record)
// =================================================
prodType:
  | LEFT_BRACE RIGHT_BRACE { ProdType [] }
  | LEFT_BRACE typedVarDecls RIGHT_BRACE  { ProdType ($2) }

// =================================================
// Function and Handler argument
// "(x:int)" "y"
// =================================================
funcArg:
  | LEFT_BRACKET typedVarDecl RIGHT_BRACKET { $2 }
  | LIDENT  { ($1, "") }

funcArgs:
  | { [] }
  | funcArg funcArgs { $1 :: $2 }

matchPattern:
  | VBAR UIDENT RARROW expr { ($2, [], $4) }
  | VBAR UIDENT LEFT_BRACKET patternVarDecls RIGHT_BRACKET RARROW expr { ($2, $4, $7) }

matchPatterns:
  | matchPattern { [$1] }
  | matchPattern matchPatterns { $1 :: $2 }

// =================================================
// Language expression is a recursive structure that
// may be one of the following:
// =================================================
expr:
  | INT
  { ENum ( $1 |> int ) }

  | LIDENT
  { EVar $1 }

  | LEFT_BRACKET expr RIGHT_BRACKET
  { $2 }

  | expr GT expr
  { EGt ($1, $3)  }

  | expr PLUS expr
  { EAdd ($1, $3) }

  | expr MINUS expr
  { ESub ($1, $3) }

  | expr STAR expr
  { EMul ($1, $3) }

  | IF expr THEN expr ELSE expr
  { EIf ($2, $4, $6) }

  | LET LIDENT EQ expr IN expr
  { ELet (false, [($2, $4)], $6) }

  | LET LIDENT funcArgs EQ expr IN expr
  {
    let argNames = List.map fst $3
    ELet (false, [($2, unfoldFunction argNames $5)], $7)
  }

  | LET RECURSIVE LIDENT funcArgs EQ expr IN expr
  {
    let argNames = List.map fst $4
    ELet (true, [($3, unfoldFunction argNames $6)], $8)
  }

  | MATCH expr WITH matchPatterns
  {
      let patterns = $4
      if (List.isEmpty patterns)
      then failwith "match pattern has to have at least 1 pattern"
      else
        let cases =
            List.map (fun (ctor,args,expr) ->
                      (hash ctor, // ctor tag is a hash of its name
                       List.map fst args, // leave only variable names
                       expr) // case body
                      ) patterns
        ECase ($2, cases)
  }

  | expr expr
  { EAp ($1, $2) }

exprs:
  | { [] }
  | expr exprs { $1 :: $2 }

// =================================================
// Declaration is one of the following:
//  datatype definition
//  handler definition
//  etc.
// =================================================
decl:
  | TYPEDEF UIDENT EQ prodType
  { TypeDef ($2, $4) }

  | TYPEDEF UIDENT EQ sumType
  { TypeDef ($2, $4) }

  | HANDLER LIDENT funcArgs EQ expr
  { HandlerDef ($2, $3, $5) }

  | LET LIDENT funcArgs EQ expr DSCOLON
  {
    let argNames = List.map fst $3
    LetBinding ($2, false, unfoldFunction argNames $5)
  }

  | LET RECURSIVE LIDENT funcArgs EQ expr DSCOLON
  {
    let argNames = List.map fst $4
    LetBinding ($3, true, unfoldFunction argNames $6)
  }


// List of declarations
decls:
  | { [] }
  | decl decls    { $1 :: $2 }

// Module is a named list of declarations.
modle:
  | MODULE LIDENT decls { Module ($2, $3) }
