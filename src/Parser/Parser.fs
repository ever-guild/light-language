// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open ParserModule

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | VBAR
  | SEMICOLON
  | EQ
  | TYPEDEF
  | MODULE
  | STRING of (string)
  | IDENT of (string)
  | LIDENT of (string)
  | UIDENT of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_VBAR
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_TYPEDEF
    | TOKEN_MODULE
    | TOKEN_STRING
    | TOKEN_IDENT
    | TOKEN_LIDENT
    | TOKEN_UIDENT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expr
    | NONTERM_varDecl
    | NONTERM_varDecls
    | NONTERM_prodtype
    | NONTERM_decl
    | NONTERM_decls
    | NONTERM_modle

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | RIGHT_BRACK  -> 3 
  | LEFT_BRACK  -> 4 
  | RIGHT_BRACE  -> 5 
  | LEFT_BRACE  -> 6 
  | VBAR  -> 7 
  | SEMICOLON  -> 8 
  | EQ  -> 9 
  | TYPEDEF  -> 10 
  | MODULE  -> 11 
  | STRING _ -> 12 
  | IDENT _ -> 13 
  | LIDENT _ -> 14 
  | UIDENT _ -> 15 
  | INT _ -> 16 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_RIGHT_BRACK 
  | 4 -> TOKEN_LEFT_BRACK 
  | 5 -> TOKEN_RIGHT_BRACE 
  | 6 -> TOKEN_LEFT_BRACE 
  | 7 -> TOKEN_VBAR 
  | 8 -> TOKEN_SEMICOLON 
  | 9 -> TOKEN_EQ 
  | 10 -> TOKEN_TYPEDEF 
  | 11 -> TOKEN_MODULE 
  | 12 -> TOKEN_STRING 
  | 13 -> TOKEN_IDENT 
  | 14 -> TOKEN_LIDENT 
  | 15 -> TOKEN_UIDENT 
  | 16 -> TOKEN_INT 
  | 19 -> TOKEN_end_of_input
  | 17 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_varDecl 
    | 5 -> NONTERM_varDecl 
    | 6 -> NONTERM_varDecls 
    | 7 -> NONTERM_varDecls 
    | 8 -> NONTERM_prodtype 
    | 9 -> NONTERM_prodtype 
    | 10 -> NONTERM_decl 
    | 11 -> NONTERM_decls 
    | 12 -> NONTERM_decls 
    | 13 -> NONTERM_modle 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 19 
let _fsyacc_tagOfErrorTerminal = 17

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACE  -> "RIGHT_BRACE" 
  | LEFT_BRACE  -> "LEFT_BRACE" 
  | VBAR  -> "VBAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | EQ  -> "EQ" 
  | TYPEDEF  -> "TYPEDEF" 
  | MODULE  -> "MODULE" 
  | STRING _ -> "STRING" 
  | IDENT _ -> "IDENT" 
  | LIDENT _ -> "LIDENT" 
  | UIDENT _ -> "UIDENT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACE  -> (null : System.Object) 
  | LEFT_BRACE  -> (null : System.Object) 
  | VBAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | TYPEDEF  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;2us;65535us;10us;9us;12us;9us;2us;65535us;10us;11us;12us;14us;1us;65535us;18us;19us;2us;65535us;20us;20us;23us;20us;2us;65535us;20us;21us;23us;24us;1us;65535us;0us;4us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;11us;13us;16us;19us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;2us;4us;5us;2us;4us;5us;1us;4us;1us;5us;2us;6us;7us;1us;7us;1us;7us;2us;8us;9us;1us;8us;1us;9us;1us;9us;1us;10us;1us;10us;1us;10us;1us;10us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;13us;16us;18us;20us;23us;25us;27us;30us;32us;34us;36us;38us;40us;42us;44us;46us;48us;50us;52us;|]
let _fsyacc_action_rows = 25
let _fsyacc_actionTableElements = [|2us;32768us;0us;3us;11us;22us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;1us;32768us;2us;6us;2us;32768us;14us;7us;15us;8us;0us;16388us;0us;16389us;1us;16390us;8us;10us;1us;32768us;14us;5us;0us;16391us;2us;32768us;5us;13us;14us;5us;0us;16392us;1us;32768us;5us;15us;0us;16393us;1us;32768us;15us;17us;1us;32768us;9us;18us;1us;32768us;6us;12us;0us;16394us;1us;16395us;10us;16us;0us;16396us;1us;32768us;14us;23us;1us;16395us;10us;16us;0us;16397us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;7us;9us;12us;13us;14us;16us;18us;19us;22us;23us;25us;26us;28us;30us;32us;33us;35us;36us;38us;40us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;3us;3us;1us;3us;2us;3us;4us;0us;2us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;5us;5us;6us;7us;7us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;65535us;65535us;16388us;16389us;65535us;65535us;16391us;65535us;16392us;65535us;16393us;65535us;65535us;65535us;16394us;65535us;16396us;65535us;65535us;16397us;|]
let _fsyacc_reductions = lazy [|
# 182 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ParserModule.Module option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 191 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "Parser.fsy"
                                   _1 
                   )
# 30 "Parser.fsy"
                 : ParserModule.Module option));
# 202 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                               None 
                   )
# 33 "Parser.fsy"
                 : 'gentype_expr));
# 212 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_modle in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "Parser.fsy"
                                 Some _1 
                   )
# 34 "Parser.fsy"
                 : 'gentype_expr));
# 223 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                                  List.singleton (_1, _3) 
                   )
# 37 "Parser.fsy"
                 : 'gentype_varDecl));
# 235 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                  List.singleton (_1, _3) 
                   )
# 38 "Parser.fsy"
                 : 'gentype_varDecl));
# 247 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varDecl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "Parser.fsy"
                                    _1 
                   )
# 41 "Parser.fsy"
                 : 'gentype_varDecls));
# 258 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varDecl in
            let _3 = parseState.GetInput(3) :?> 'gentype_varDecls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                                       _1 @ _3 
                   )
# 42 "Parser.fsy"
                 : 'gentype_varDecls));
# 270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                  ProdType [] 
                   )
# 45 "Parser.fsy"
                 : 'gentype_prodtype));
# 280 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_varDecls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                            ProdType _2 
                   )
# 46 "Parser.fsy"
                 : 'gentype_prodtype));
# 291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_prodtype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                                       TypeDef (_2, _4) 
                   )
# 49 "Parser.fsy"
                 : 'gentype_decl));
# 303 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                           [] 
                   )
# 52 "Parser.fsy"
                 : 'gentype_decls));
# 313 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decl in
            let _2 = parseState.GetInput(2) :?> 'gentype_decls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                         _1 :: _2 
                   )
# 53 "Parser.fsy"
                 : 'gentype_decls));
# 325 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_decls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                               Module (_2, _3) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_modle));
|]
# 338 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 20;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParserModule.Module option =
    engine lexer lexbuf 0 :?> _
