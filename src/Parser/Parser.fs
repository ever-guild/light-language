// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open ParserModule

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | COLON
  | RIGHT_BRACK
  | LEFT_BRACK
  | RIGHT_BRACE
  | LEFT_BRACE
  | STAR
  | VBAR
  | SEMICOLON
  | EQ
  | OF
  | TYPEDEF
  | MODULE
  | STRING of (string)
  | IDENT of (string)
  | LIDENT of (string)
  | UIDENT of (string)
  | INT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_RIGHT_BRACK
    | TOKEN_LEFT_BRACK
    | TOKEN_RIGHT_BRACE
    | TOKEN_LEFT_BRACE
    | TOKEN_STAR
    | TOKEN_VBAR
    | TOKEN_SEMICOLON
    | TOKEN_EQ
    | TOKEN_OF
    | TOKEN_TYPEDEF
    | TOKEN_MODULE
    | TOKEN_STRING
    | TOKEN_IDENT
    | TOKEN_LIDENT
    | TOKEN_UIDENT
    | TOKEN_INT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expr
    | NONTERM_varDecl
    | NONTERM_varDecls
    | NONTERM_ctorArg
    | NONTERM_ctorArgs
    | NONTERM_sumtypeCtor
    | NONTERM_sumtypeCtors
    | NONTERM_sumtype
    | NONTERM_prodtype
    | NONTERM_decl
    | NONTERM_decls
    | NONTERM_modle

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | COLON  -> 2 
  | RIGHT_BRACK  -> 3 
  | LEFT_BRACK  -> 4 
  | RIGHT_BRACE  -> 5 
  | LEFT_BRACE  -> 6 
  | STAR  -> 7 
  | VBAR  -> 8 
  | SEMICOLON  -> 9 
  | EQ  -> 10 
  | OF  -> 11 
  | TYPEDEF  -> 12 
  | MODULE  -> 13 
  | STRING _ -> 14 
  | IDENT _ -> 15 
  | LIDENT _ -> 16 
  | UIDENT _ -> 17 
  | INT _ -> 18 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_COLON 
  | 3 -> TOKEN_RIGHT_BRACK 
  | 4 -> TOKEN_LEFT_BRACK 
  | 5 -> TOKEN_RIGHT_BRACE 
  | 6 -> TOKEN_LEFT_BRACE 
  | 7 -> TOKEN_STAR 
  | 8 -> TOKEN_VBAR 
  | 9 -> TOKEN_SEMICOLON 
  | 10 -> TOKEN_EQ 
  | 11 -> TOKEN_OF 
  | 12 -> TOKEN_TYPEDEF 
  | 13 -> TOKEN_MODULE 
  | 14 -> TOKEN_STRING 
  | 15 -> TOKEN_IDENT 
  | 16 -> TOKEN_LIDENT 
  | 17 -> TOKEN_UIDENT 
  | 18 -> TOKEN_INT 
  | 21 -> TOKEN_end_of_input
  | 19 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expr 
    | 3 -> NONTERM_expr 
    | 4 -> NONTERM_varDecl 
    | 5 -> NONTERM_varDecl 
    | 6 -> NONTERM_varDecls 
    | 7 -> NONTERM_varDecls 
    | 8 -> NONTERM_ctorArg 
    | 9 -> NONTERM_ctorArg 
    | 10 -> NONTERM_ctorArgs 
    | 11 -> NONTERM_ctorArgs 
    | 12 -> NONTERM_sumtypeCtor 
    | 13 -> NONTERM_sumtypeCtor 
    | 14 -> NONTERM_sumtypeCtors 
    | 15 -> NONTERM_sumtypeCtors 
    | 16 -> NONTERM_sumtype 
    | 17 -> NONTERM_prodtype 
    | 18 -> NONTERM_prodtype 
    | 19 -> NONTERM_decl 
    | 20 -> NONTERM_decl 
    | 21 -> NONTERM_decls 
    | 22 -> NONTERM_decls 
    | 23 -> NONTERM_modle 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 21 
let _fsyacc_tagOfErrorTerminal = 19

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | RIGHT_BRACK  -> "RIGHT_BRACK" 
  | LEFT_BRACK  -> "LEFT_BRACK" 
  | RIGHT_BRACE  -> "RIGHT_BRACE" 
  | LEFT_BRACE  -> "LEFT_BRACE" 
  | STAR  -> "STAR" 
  | VBAR  -> "VBAR" 
  | SEMICOLON  -> "SEMICOLON" 
  | EQ  -> "EQ" 
  | OF  -> "OF" 
  | TYPEDEF  -> "TYPEDEF" 
  | MODULE  -> "MODULE" 
  | STRING _ -> "STRING" 
  | IDENT _ -> "IDENT" 
  | LIDENT _ -> "LIDENT" 
  | UIDENT _ -> "UIDENT" 
  | INT _ -> "INT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | RIGHT_BRACK  -> (null : System.Object) 
  | LEFT_BRACK  -> (null : System.Object) 
  | RIGHT_BRACE  -> (null : System.Object) 
  | LEFT_BRACE  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | VBAR  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | OF  -> (null : System.Object) 
  | TYPEDEF  -> (null : System.Object) 
  | MODULE  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | UIDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;2us;65535us;10us;9us;25us;9us;2us;65535us;10us;11us;25us;27us;2us;65535us;16us;15us;20us;15us;2us;65535us;16us;17us;20us;21us;2us;65535us;22us;22us;31us;22us;2us;65535us;22us;23us;31us;24us;1us;65535us;31us;33us;1us;65535us;31us;32us;2us;65535us;34us;34us;37us;34us;2us;65535us;34us;35us;37us;38us;1us;65535us;0us;4us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;8us;11us;14us;17us;20us;23us;25us;27us;30us;33us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;2us;1us;3us;2us;4us;5us;2us;4us;5us;1us;4us;1us;5us;2us;6us;7us;1us;7us;1us;7us;2us;8us;9us;1us;8us;1us;8us;2us;10us;11us;1us;11us;1us;11us;2us;12us;13us;2us;12us;13us;1us;13us;1us;13us;2us;14us;15us;1us;15us;1us;16us;2us;17us;18us;1us;17us;1us;18us;1us;18us;2us;19us;20us;2us;19us;20us;2us;19us;20us;1us;19us;1us;20us;1us;22us;1us;22us;1us;23us;1us;23us;1us;23us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;13us;16us;18us;20us;23us;25us;27us;30us;32us;34us;37us;39us;41us;44us;47us;49us;51us;54us;56us;58us;61us;63us;65us;67us;70us;73us;76us;78us;80us;82us;84us;86us;88us;|]
let _fsyacc_action_rows = 39
let _fsyacc_actionTableElements = [|2us;32768us;0us;3us;13us;36us;0us;49152us;0us;16385us;0us;16386us;0us;16387us;1us;32768us;2us;6us;2us;32768us;16us;7us;17us;8us;0us;16388us;0us;16389us;1us;16390us;9us;10us;1us;32768us;16us;5us;0us;16391us;1us;16393us;2us;13us;1us;32768us;17us;14us;0us;16392us;1us;16394us;7us;16us;1us;32768us;16us;12us;0us;16395us;1us;32768us;17us;19us;1us;16396us;11us;20us;1us;32768us;16us;12us;0us;16397us;1us;16398us;8us;18us;0us;16399us;0us;16400us;2us;32768us;5us;26us;16us;5us;0us;16401us;1us;32768us;5us;28us;0us;16402us;1us;32768us;17us;30us;1us;32768us;10us;31us;2us;32768us;6us;25us;8us;18us;0us;16403us;0us;16404us;1us;16405us;12us;29us;0us;16406us;1us;32768us;16us;37us;1us;16405us;12us;29us;0us;16407us;|]
let _fsyacc_actionTableRowOffsets = [|0us;3us;4us;5us;6us;7us;9us;12us;13us;14us;16us;18us;19us;21us;23us;24us;26us;28us;29us;31us;33us;35us;36us;38us;39us;40us;43us;44us;46us;47us;49us;51us;54us;55us;56us;58us;59us;61us;63us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;1us;3us;3us;1us;3us;3us;1us;1us;3us;2us;4us;1us;2us;1us;2us;3us;4us;4us;0us;2us;3us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;2us;2us;3us;3us;4us;4us;5us;5us;6us;6us;7us;7us;8us;8us;9us;10us;10us;11us;11us;12us;12us;13us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;16386us;16387us;65535us;65535us;16388us;16389us;65535us;65535us;16391us;65535us;65535us;16392us;65535us;65535us;16395us;65535us;65535us;65535us;16397us;65535us;16399us;16400us;65535us;16401us;65535us;16402us;65535us;65535us;65535us;16403us;16404us;65535us;16406us;65535us;65535us;16407us;|]
let _fsyacc_reductions = lazy [|
# 209 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> ParserModule.Module option in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 218 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "Parser.fsy"
                                   _1 
                   )
# 32 "Parser.fsy"
                 : ParserModule.Module option));
# 229 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "Parser.fsy"
                               None 
                   )
# 35 "Parser.fsy"
                 : 'gentype_expr));
# 239 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_modle in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                 Some _1 
                   )
# 36 "Parser.fsy"
                 : 'gentype_expr));
# 250 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "Parser.fsy"
                                                  List.singleton (_1, _3) 
                   )
# 39 "Parser.fsy"
                 : 'gentype_varDecl));
# 262 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                                  List.singleton (_1, _3) 
                   )
# 40 "Parser.fsy"
                 : 'gentype_varDecl));
# 274 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varDecl in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                    _1 
                   )
# 43 "Parser.fsy"
                 : 'gentype_varDecls));
# 285 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_varDecl in
            let _3 = parseState.GetInput(3) :?> 'gentype_varDecls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                                       _1 @ _3 
                   )
# 44 "Parser.fsy"
                 : 'gentype_varDecls));
# 297 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                                 (_1, _3) 
                   )
# 47 "Parser.fsy"
                 : 'gentype_ctorArg));
# 309 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                                 (_1, "") 
                   )
# 48 "Parser.fsy"
                 : 'gentype_ctorArg));
# 320 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctorArg in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                   List.singleton _1 
                   )
# 51 "Parser.fsy"
                 : 'gentype_ctorArgs));
# 331 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_ctorArg in
            let _3 = parseState.GetInput(3) :?> 'gentype_ctorArgs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                                  _1 :: _3 
                   )
# 52 "Parser.fsy"
                 : 'gentype_ctorArgs));
# 343 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                       (_2, []) 
                   )
# 55 "Parser.fsy"
                 : 'gentype_sumtypeCtor));
# 354 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ctorArgs in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                   (_2, _4) 
                   )
# 56 "Parser.fsy"
                 : 'gentype_sumtypeCtor));
# 366 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_sumtypeCtor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                        List.singleton _1 
                   )
# 59 "Parser.fsy"
                 : 'gentype_sumtypeCtors));
# 377 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_sumtypeCtor in
            let _2 = parseState.GetInput(2) :?> 'gentype_sumtypeCtors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                    _1 :: _2 
                   )
# 60 "Parser.fsy"
                 : 'gentype_sumtypeCtors));
# 389 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_sumtypeCtors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                         SumType _1 
                   )
# 63 "Parser.fsy"
                 : 'gentype_sumtype));
# 400 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                                  ProdType [] 
                   )
# 66 "Parser.fsy"
                 : 'gentype_prodtype));
# 410 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_varDecls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                                            ProdType (_2) 
                   )
# 67 "Parser.fsy"
                 : 'gentype_prodtype));
# 421 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_prodtype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                       TypeDef (_2, _4) 
                   )
# 70 "Parser.fsy"
                 : 'gentype_decl));
# 433 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_sumtype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                     TypeDef (_2, _4) 
                   )
# 71 "Parser.fsy"
                 : 'gentype_decl));
# 445 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                           [] 
                   )
# 74 "Parser.fsy"
                 : 'gentype_decls));
# 455 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_decl in
            let _2 = parseState.GetInput(2) :?> 'gentype_decls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                         _1 :: _2 
                   )
# 75 "Parser.fsy"
                 : 'gentype_decls));
# 467 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_decls in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                               Module (_2, _3) 
                   )
# 78 "Parser.fsy"
                 : 'gentype_modle));
|]
# 480 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 22;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : ParserModule.Module option =
    engine lexer lexbuf 0 :?> _
