// Description:
//    This file contains random notes on the topic of Lighthouse language.
// Author:
//    Evgeniy Shishkin <evgeniy.shishkin@gmail.com>
// Date:
//    Jan 2023

Содержимое стека на момент передачи управления в контракт:
* acc_balance
* msg_balance
* in_msg_cell
* in_msg_body_slice
* is_ext_msg

Самый последний элемент - признак внешнего сообщения - находится
на вершине стека.

** Обработчик отправляет сообщения и изменяет состояние контракта

По-мимо вычислений, обработчик отправляет сообщения и меняет состояние
контракта. В качестве типа возвращаемого значения указан unit.

** Параметры для обработчика сообщений

Предположим, есть обработчик:
handler add_more (x:int) =
  ...

Это  сокращенная форма  записи.  На самом  деле, обработчик  принимает
такие параметры:

handler add_more (state:State) (x:int) =
 ...

или, аналогично,

handler add_more state x =
 ...

Первые две переменные - стандартные для всех обработчиков, поэтому они
по  умолчанию  скрываются  из  списка параметров.  Их,  однако,  можно
указать при желании. Тип обработчика отражает параметры:

add_more: State -> int -> unit


Альтернативный формат передачи всей этой служебной информации:

add_more: Context -> int -> unit

type Context = {
  msg: Message;
  state: State;
  acc_balance: NanoGrams;
}

Тогда везде нужно писать:
 ctx.msg.src;
 ctx.msg.dest;
 ctx.acc_balance;

и определить вспомогательные функции:
 now(), acc_balance() ...


====================================================================

Считать состояние контракта можно такой командой:
tonos-cli -c ./scripts/tonos-cli.conf.json  account 0:6bbc78e5bb60100f0b6661da7af62e54
d53be3b08e2541bde1b453be9d338709 | grep data_boc

====================================================================

Генерируем код для сериализации и десериализации объекта указанного типа в ячейку или
из ячейки. Объект или ячейка должны находится на вершине стека перед вызовом
сгенерированного кода.

#r "LHTypes.dll" ;;
open LHTypes ;;
serializeValue [] (PT [("f",Bool); ("fun", Function (Int 256, Int 256))]) ;;
deserializeValue [] (PT [("f",Bool); ("fun", Function (Int 256, Int 256))]) ;;
