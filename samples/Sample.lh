contract Simple

type State = {
  counter: int;
  sum: int
}

let sum a b = a + b
;;

let accept () =
  assembly "ACCEPT" :> unit ;
  ()
;;

let getC4 () =
  assembly "c4 PUSHCTR" :> VMCell
;;

let putC4 (x:VMCell) =
  assembly "c4 POPCTR" :> unit ;
  ()
;;

let add_more (x: int) (st:State) =
   let sum' = sum st.counter x in
   let counter' = x in
   { counter = counter'; sum = sum' }
;;

let main (msgCell:VMCell) (st:State) =
  let rec fact n =
    if (n > 1) then n * fact (n - 1) else 1
  in
    accept () ;
    add_more (fact 20) st
;;
